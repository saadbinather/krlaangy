// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  plans     Plan[]
  votes     Vote[]
  comments  Comment[]

  @@map("users")
}

model Plan {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdBy    User          @relation(fields: [createdById], references: [id])
  createdById  String        @db.ObjectId
  options      PlanOption[]
  votes        Vote[]
  comments     Comment[]

  @@map("plans")
}

model PlanOption {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  optionText String

  // Relations
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId String @db.ObjectId
  votes  Vote[]

  @@map("plan_options")
}

model Vote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String     @db.ObjectId
  option   PlanOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId String     @db.ObjectId
  plan     Plan       @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId   String     @db.ObjectId

  @@unique([userId, planId])
  @@map("votes")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  plan   Plan @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId String @db.ObjectId

  @@map("comments")
} 